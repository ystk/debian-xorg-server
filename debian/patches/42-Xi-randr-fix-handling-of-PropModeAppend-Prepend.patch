From 69ceb12e9c9dc42175aba48bb86f2842423d7082 Mon Sep 17 00:00:00 2001
From: Peter Hutterer <peter.hutterer@who-t.net>
Date: Tue, 3 Oct 2023 11:53:05 +1000
Subject: [PATCH xserver 1/4] Xi/randr: fix handling of PropModeAppend/Prepend

The handling of appending/prepending properties was incorrect, with at
least two bugs: the property length was set to the length of the new
part only, i.e. appending or prepending N elements to a property with P
existing elements always resulted in the property having N elements
instead of N + P.

Second, when pre-pending a value to a property, the offset for the old
values was incorrect, leaving the new property with potentially
uninitalized values and/or resulting in OOB memory writes.
For example, prepending a 3 element value to a 5 element property would
result in this 8 value array:
  [N, N, N, ?, ?, P, P, P ] P, P
                            ^OOB write

The XI2 code is a copy/paste of the RandR code, so the bug exists in
both.

CVE-2023-5367, ZDI-CAN-22153

This vulnerability was discovered by:
Jan-Niklas Sohn working with Trend Micro Zero Day Initiative

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
---
 Xi/xiproperty.c    | 4 ++--
 randr/rrproperty.c | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

Index: xorg-server-1.16.4/Xi/xiproperty.c
===================================================================
--- xorg-server-1.16.4.orig/Xi/xiproperty.c	2023-10-24 16:19:56.250867510 +0200
+++ xorg-server-1.16.4/Xi/xiproperty.c	2023-10-24 16:19:56.250867510 +0200
@@ -732,7 +732,7 @@
                 XIDestroyDeviceProperty(prop);
             return BadAlloc;
         }
-        new_value.size = len;
+        new_value.size = total_len;
         new_value.type = type;
         new_value.format = format;
 
@@ -749,7 +749,7 @@
         case PropModePrepend:
             new_data = new_value.data;
             old_data = (void *) (((char *) new_value.data) +
-                                  (prop_value->size * size_in_bytes));
+                                  (len * size_in_bytes));
             break;
         }
         if (new_data)
Index: xorg-server-1.16.4/randr/rrproperty.c
===================================================================
--- xorg-server-1.16.4.orig/randr/rrproperty.c	2023-10-24 16:19:56.250867510 +0200
+++ xorg-server-1.16.4/randr/rrproperty.c	2023-10-24 16:19:56.250867510 +0200
@@ -187,7 +187,7 @@
                 RRDestroyOutputProperty(prop);
             return BadAlloc;
         }
-        new_value.size = len;
+        new_value.size = total_len;
         new_value.type = type;
         new_value.format = format;
 
@@ -204,7 +204,7 @@
         case PropModePrepend:
             new_data = new_value.data;
             old_data = (void *) (((char *) new_value.data) +
-                                  (prop_value->size * size_in_bytes));
+                                  (len * size_in_bytes));
             break;
         }
         if (new_data)
