From 73c63afb93c0af1bfd1969bf6e71c9edca586c77 Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@oracle.com>
Date: Sun, 26 Jan 2014 10:54:41 -0800
Subject: Xi: unvalidated lengths in Xinput extension [CVE-2014-8095]

Multiple functions in the Xinput extension handling of requests from
clients failed to check that the length of the request sent by the
client was large enough to perform all the required operations and
thus could read or write to memory outside the bounds of the request
buffer.

This commit includes the creation of a new REQUEST_AT_LEAST_EXTRA_SIZE
macro in include/dix.h for the common case of needing to ensure a
request is large enough to include both the request itself and a
minimum amount of extra data following the request header.

Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>

[hertzog@debian.org: Backported to apply on version 1.7.]
--- a/Xi/chgdctl.c
+++ b/Xi/chgdctl.c
@@ -81,7 +81,7 @@ SProcXChangeDeviceControl(ClientPtr clie
 
     REQUEST(xChangeDeviceControlReq);
     swaps(&stuff->length, n);
-    REQUEST_AT_LEAST_SIZE(xChangeDeviceControlReq);
+    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
     swaps(&stuff->control, n);
     ctl = (xDeviceCtl*)&stuff[1];
     swaps(&ctl->control, n);
@@ -140,7 +140,7 @@ ProcXChangeDeviceControl(ClientPtr clien
     devicePresenceNotify dpn;
 
     REQUEST(xChangeDeviceControlReq);
-    REQUEST_AT_LEAST_SIZE(xChangeDeviceControlReq);
+    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
 
     len = stuff->length - bytes_to_int32(sizeof(xChangeDeviceControlReq));
     ret = dixLookupDevice(&dev, stuff->deviceid, client, DixManageAccess);
@@ -248,6 +248,10 @@ ProcXChangeDeviceControl(ClientPtr clien
         break;
     case DEVICE_ENABLE:
         e = (xDeviceEnableCtl *)&stuff[1];
+	if ((len != bytes_to_int32(sizeof(xDeviceEnableCtl)))) {
+	    ret = BadLength;
+	    goto out;
+	}
 
         status = ChangeDeviceControl(client, dev, (xDeviceCtl *) e);
 
--- a/Xi/chgfctl.c
+++ b/Xi/chgfctl.c
@@ -471,6 +471,8 @@ ProcXChangeFeedbackControl(ClientPtr cli
 	xStringFeedbackCtl *f = ((xStringFeedbackCtl *) & stuff[1]);
 
 	if (client->swapped) {
+	    if (len < bytes_to_int32(sizeof(xStringFeedbackCtl)))
+		return BadLength;
 	    swaps(&f->num_keysyms, n);
 	}
 	if (len != (bytes_to_int32(sizeof(xStringFeedbackCtl)) + f->num_keysyms))
--- a/Xi/sendexev.c
+++ b/Xi/sendexev.c
@@ -134,6 +134,9 @@ ProcXSendExtensionEvent(ClientPtr client
     if (ret != Success)
 	return ret;
 
+    if (stuff->num_events == 0)
+        return ret;
+
     /* The client's event type must be one defined by an extension. */
 
     first = ((xEvent *) & stuff[1]);
--- a/Xi/xiallowev.c
+++ b/Xi/xiallowev.c
@@ -47,6 +47,7 @@ SProcXIAllowEvents(ClientPtr client)
     char n;
 
     REQUEST(xXIAllowEventsReq);
+    REQUEST_AT_LEAST_SIZE(xXIAllowEventsReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
--- a/Xi/xichangecursor.c
+++ b/Xi/xichangecursor.c
@@ -59,11 +59,11 @@ SProcXIChangeCursor(ClientPtr client)
     char n;
 
     REQUEST(xXIChangeCursorReq);
+    REQUEST_SIZE_MATCH(xXIChangeCursorReq);
     swaps(&stuff->length, n);
     swapl(&stuff->win, n);
     swapl(&stuff->cursor, n);
     swaps(&stuff->deviceid, n);
-    REQUEST_SIZE_MATCH(xXIChangeCursorReq);
     return (ProcXIChangeCursor(client));
 }
 
--- a/Xi/xichangehierarchy.c
+++ b/Xi/xichangehierarchy.c
@@ -143,7 +143,7 @@ ProcXIChangeHierarchy(ClientPtr client)
 {
     DeviceIntPtr ptr, keybd, XTestptr, XTestkeybd;
     xXIAnyHierarchyChangeInfo *any;
-    int required_len = sizeof(xXIChangeHierarchyReq);
+    size_t len; /* length of data remaining in request */
     char n;
     int rc = Success;
     int flags[MAXDEVICES] = {0};
@@ -154,16 +154,32 @@ ProcXIChangeHierarchy(ClientPtr client)
     if (!stuff->num_changes)
         return rc;
 
+    if (stuff->length > (INT_MAX >> 2))
+	return BadAlloc;
+    len = (stuff->length << 2) - sizeof(xXIAnyHierarchyChangeInfo);
+
     any = (xXIAnyHierarchyChangeInfo*)&stuff[1];
     while(stuff->num_changes--)
     {
+	if (len < sizeof(xXIAnyHierarchyChangeInfo)) {
+	    rc = BadLength;
+	    goto unwind;
+	}
+
         SWAPIF(swapl(&any->type, n));
         SWAPIF(swaps(&any->length, n));
 
-        required_len += any->length;
-        if ((stuff->length * 4) < required_len)
+	if ((any->length > (INT_MAX >> 2)) || (len < (any->length << 2)))
             return BadLength;
 
+#define CHANGE_SIZE_MATCH(type) \
+    do { \
+	if ((len < sizeof(type)) || (any->length != (sizeof(type) >> 2))) { \
+	    rc = BadLength; \
+	    goto unwind; \
+	} \
+    } while(0)
+
         switch(any->type)
         {
             case XIAddMaster:
@@ -171,7 +187,17 @@ ProcXIChangeHierarchy(ClientPtr client)
                     xXIAddMasterInfo* c = (xXIAddMasterInfo*)any;
                     char* name;
 
+		    /* Variable length, due to appended name string */
+		    if (len < sizeof(xXIAddMasterInfo)) {
+			rc = BadLength;
+			goto unwind;
+		    }
                     SWAPIF(swaps(&c->name_len, n));
+		    if (c->name_len > (len - sizeof(xXIAddMasterInfo))) {
+			rc = BadLength;
+			goto unwind;
+		    }
+
                     name = xcalloc(c->name_len + 1, sizeof(char));
                     strncpy(name, (char*)&c[1], c->name_len);
 
@@ -235,6 +261,7 @@ ProcXIChangeHierarchy(ClientPtr client)
                 {
                     xXIRemoveMasterInfo* r = (xXIRemoveMasterInfo*)any;
 
+		    CHANGE_SIZE_MATCH(xXIRemoveMasterInfo);
                     if (r->return_mode != XIAttachToMaster &&
                             r->return_mode != XIFloating)
                         return BadValue;
@@ -369,6 +396,7 @@ ProcXIChangeHierarchy(ClientPtr client)
                 {
                     xXIDetachSlaveInfo* c = (xXIDetachSlaveInfo*)any;
 
+		    CHANGE_SIZE_MATCH(xXIDetachSlaveInfo);
                     rc = dixLookupDevice(&ptr, c->deviceid, client,
                                           DixManageAccess);
                     if (rc != Success)
@@ -398,6 +426,7 @@ ProcXIChangeHierarchy(ClientPtr client)
                     xXIAttachSlaveInfo* c = (xXIAttachSlaveInfo*)any;
                     DeviceIntPtr newmaster;
 
+		    CHANGE_SIZE_MATCH(xXIAttachSlaveInfo);
                     rc = dixLookupDevice(&ptr, c->deviceid, client,
                                           DixManageAccess);
                     if (rc != Success)
@@ -443,6 +472,7 @@ ProcXIChangeHierarchy(ClientPtr client)
                 break;
         }
 
+	len -= any->length * 4;
         any = (xXIAnyHierarchyChangeInfo*)((char*)any + any->length * 4);
     }
 
--- a/Xi/xigetclientpointer.c
+++ b/Xi/xigetclientpointer.c
@@ -51,6 +51,7 @@ SProcXIGetClientPointer(ClientPtr client
 {
     char n;
     REQUEST(xXIGetClientPointerReq);
+    REQUEST_SIZE_MATCH(xXIGetClientPointerReq);
 
     swaps(&stuff->length, n);
     swapl(&stuff->win, n);
--- a/Xi/xigrabdev.c
+++ b/Xi/xigrabdev.c
@@ -48,6 +48,11 @@ SProcXIGrabDevice(ClientPtr client)
     char n;
 
     REQUEST(xXIGrabDeviceReq);
+    /*
+     * Check here for at least the length of the struct we swap, then
+     * let ProcXIGrabDevice check the full size after we swap mask_len.
+     */
+    REQUEST_AT_LEAST_SIZE(xXIGrabDeviceReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
@@ -70,7 +75,7 @@ ProcXIGrabDevice(ClientPtr client)
     int mask_len;
 
     REQUEST(xXIGrabDeviceReq);
-    REQUEST_AT_LEAST_SIZE(xXIGrabDeviceReq);
+    REQUEST_FIXED_SIZE(xXIGrabDeviceReq, ((size_t) stuff->mask_len) * 4);
 
     ret = dixLookupDevice(&dev, stuff->deviceid, client, DixGrabAccess);
     if (ret != Success)
@@ -118,6 +123,7 @@ SProcXIUngrabDevice(ClientPtr client)
     char n;
 
     REQUEST(xXIUngrabDeviceReq);
+    REQUEST_SIZE_MATCH(xXIUngrabDeviceReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
@@ -135,6 +141,7 @@ ProcXIUngrabDevice(ClientPtr client)
     TimeStamp time;
 
     REQUEST(xXIUngrabDeviceReq);
+    REQUEST_SIZE_MATCH(xXIUngrabDeviceReq);
 
     ret = dixLookupDevice(&dev, stuff->deviceid, client, DixGetAttrAccess);
     if (ret != Success)
--- a/Xi/xipassivegrab.c
+++ b/Xi/xipassivegrab.c
@@ -52,6 +52,7 @@ SProcXIPassiveGrabDevice(ClientPtr clien
     xXIModifierInfo *mods;
 
     REQUEST(xXIPassiveGrabDeviceReq);
+    REQUEST_AT_LEAST_SIZE(xXIPassiveGrabDeviceReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
@@ -62,6 +63,8 @@ SProcXIPassiveGrabDevice(ClientPtr clien
     swaps(&stuff->mask_len, n);
     swaps(&stuff->num_modifiers, n);
 
+    REQUEST_FIXED_SIZE(xXIPassiveGrabDeviceReq,
+	((uint32_t) stuff->mask_len + stuff->num_modifiers) * 4);
     mods = (xXIModifierInfo*)&stuff[1];
 
     for (i = 0; i < stuff->num_modifiers; i++, mods++)
@@ -89,7 +92,8 @@ ProcXIPassiveGrabDevice(ClientPtr client
     int mask_len;
 
     REQUEST(xXIPassiveGrabDeviceReq);
-    REQUEST_AT_LEAST_SIZE(xXIPassiveGrabDeviceReq);
+    REQUEST_FIXED_SIZE(xXIPassiveGrabDeviceReq,
+        ((uint32_t) stuff->mask_len + stuff->num_modifiers) * 4);
 
     if (stuff->deviceid == XIAllDevices)
         dev = inputInfo.all_devices;
@@ -229,6 +233,7 @@ SProcXIPassiveUngrabDevice(ClientPtr cli
     uint32_t *modifiers;
 
     REQUEST(xXIPassiveUngrabDeviceReq);
+    REQUEST_AT_LEAST_SIZE(xXIPassiveUngrabDeviceReq);
 
     swaps(&stuff->length, n);
     swapl(&stuff->grab_window, n);
@@ -236,6 +241,8 @@ SProcXIPassiveUngrabDevice(ClientPtr cli
     swapl(&stuff->detail, n);
     swaps(&stuff->num_modifiers, n);
 
+    REQUEST_FIXED_SIZE(xXIPassiveUngrabDeviceReq,
+                       ((uint32_t) stuff->num_modifiers) << 2);
     modifiers = (uint32_t*)&stuff[1];
 
     for (i = 0; i < stuff->num_modifiers; i++, modifiers++)
@@ -254,7 +261,8 @@ ProcXIPassiveUngrabDevice(ClientPtr clie
     int i, rc;
 
     REQUEST(xXIPassiveUngrabDeviceReq);
-    REQUEST_AT_LEAST_SIZE(xXIPassiveUngrabDeviceReq);
+    REQUEST_FIXED_SIZE(xXIPassiveUngrabDeviceReq,
+                       ((uint32_t) stuff->num_modifiers) << 2);
 
     rc = dixLookupDevice(&dev, stuff->deviceid, client, DixGrabAccess);
     if (rc != Success)
--- a/Xi/xiproperty.c
+++ b/Xi/xiproperty.c
@@ -1028,10 +1028,10 @@ SProcXListDeviceProperties (ClientPtr cl
 {
     char n;
     REQUEST(xListDevicePropertiesReq);
+    REQUEST_SIZE_MATCH(xListDevicePropertiesReq);
 
     swaps(&stuff->length, n);
 
-    REQUEST_SIZE_MATCH(xListDevicePropertiesReq);
     return (ProcXListDeviceProperties(client));
 }
 
@@ -1040,12 +1040,12 @@ SProcXChangeDeviceProperty (ClientPtr cl
 {
     char n;
     REQUEST(xChangeDevicePropertyReq);
+    REQUEST_SIZE_MATCH(xChangeDevicePropertyReq);
 
     swaps(&stuff->length, n);
     swapl(&stuff->property, n);
     swapl(&stuff->type, n);
     swapl(&stuff->nUnits, n);
-    REQUEST_SIZE_MATCH(xChangeDevicePropertyReq);
     return (ProcXChangeDeviceProperty(client));
 }
 
@@ -1054,10 +1054,10 @@ SProcXDeleteDeviceProperty (ClientPtr cl
 {
     char n;
     REQUEST(xDeleteDevicePropertyReq);
+    REQUEST_SIZE_MATCH(xDeleteDevicePropertyReq);
 
     swaps(&stuff->length, n);
     swapl(&stuff->property, n);
-    REQUEST_SIZE_MATCH(xDeleteDevicePropertyReq);
     return (ProcXDeleteDeviceProperty(client));
 }
 
@@ -1066,13 +1066,13 @@ SProcXGetDeviceProperty (ClientPtr clien
 {
     char n;
     REQUEST(xGetDevicePropertyReq);
+    REQUEST_SIZE_MATCH(xGetDevicePropertyReq);
 
     swaps(&stuff->length, n);
     swapl(&stuff->property, n);
     swapl(&stuff->type, n);
     swapl(&stuff->longOffset, n);
     swapl(&stuff->longLength, n);
-    REQUEST_SIZE_MATCH(xGetDevicePropertyReq);
     return (ProcXGetDeviceProperty(client));
 }
 
@@ -1271,11 +1271,10 @@ SProcXIListProperties(ClientPtr client)
 {
     char n;
     REQUEST(xXIListPropertiesReq);
+    REQUEST_SIZE_MATCH(xXIListPropertiesReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
-
-    REQUEST_SIZE_MATCH(xXIListPropertiesReq);
     return (ProcXIListProperties(client));
 }
 
@@ -1284,13 +1283,13 @@ SProcXIChangeProperty(ClientPtr client)
 {
     char n;
     REQUEST(xXIChangePropertyReq);
+    REQUEST_SIZE_MATCH(xXIChangePropertyReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
     swapl(&stuff->property, n);
     swapl(&stuff->type, n);
     swapl(&stuff->num_items, n);
-    REQUEST_SIZE_MATCH(xXIChangePropertyReq);
     return (ProcXIChangeProperty(client));
 }
 
@@ -1299,11 +1298,11 @@ SProcXIDeleteProperty(ClientPtr client)
 {
     char n;
     REQUEST(xXIDeletePropertyReq);
+    REQUEST_SIZE_MATCH(xXIDeletePropertyReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
     swapl(&stuff->property, n);
-    REQUEST_SIZE_MATCH(xXIDeletePropertyReq);
     return (ProcXIDeleteProperty(client));
 }
 
@@ -1312,6 +1311,7 @@ SProcXIGetProperty(ClientPtr client)
 {
     char n;
     REQUEST(xXIGetPropertyReq);
+    REQUEST_SIZE_MATCH(xXIGetPropertyReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
@@ -1319,7 +1319,6 @@ SProcXIGetProperty(ClientPtr client)
     swapl(&stuff->type, n);
     swapl(&stuff->offset, n);
     swapl(&stuff->len, n);
-    REQUEST_SIZE_MATCH(xXIGetPropertyReq);
     return (ProcXIGetProperty(client));
 }
 
--- a/Xi/xiquerydevice.c
+++ b/Xi/xiquerydevice.c
@@ -55,6 +55,7 @@ SProcXIQueryDevice(ClientPtr client)
     char n;
 
     REQUEST(xXIQueryDeviceReq);
+    REQUEST_SIZE_MATCH(xXIQueryDeviceReq);
 
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
--- a/Xi/xiquerypointer.c
+++ b/Xi/xiquerypointer.c
@@ -63,6 +63,8 @@ SProcXIQueryPointer(ClientPtr client)
     char n;
 
     REQUEST(xXIQueryPointerReq);
+    REQUEST_SIZE_MATCH(xXIQueryPointerReq);
+
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
     swapl(&stuff->win, n);
--- a/Xi/xiselectev.c
+++ b/Xi/xiselectev.c
@@ -60,6 +60,7 @@ SProcXISelectEvents(ClientPtr client)
 {
     char n;
     int i;
+    int len;
     xXIEventMask* evmask;
 
     REQUEST(xXISelectEventsReq);
@@ -68,11 +69,18 @@ SProcXISelectEvents(ClientPtr client)
     swapl(&stuff->win, n);
     swaps(&stuff->num_masks, n);
 
+    len = stuff->length - bytes_to_int32(sizeof(xXISelectEventsReq));
     evmask = (xXIEventMask*)&stuff[1];
     for (i = 0; i < stuff->num_masks; i++)
     {
+	if (len < bytes_to_int32(sizeof(xXIEventMask)))
+	    return BadLength;
+	len -= bytes_to_int32(sizeof(xXIEventMask));
         swaps(&evmask->deviceid, n);
         swaps(&evmask->mask_len, n);
+	if (len < evmask->mask_len)
+	    return BadLength;
+	len -= evmask->mask_len;
         evmask = (xXIEventMask*)(((char*)&evmask[1]) + evmask->mask_len * 4);
     }
 
--- a/Xi/xisetclientpointer.c
+++ b/Xi/xisetclientpointer.c
@@ -54,10 +54,11 @@ SProcXISetClientPointer(ClientPtr client
     char n;
 
     REQUEST(xXISetClientPointerReq);
+    REQUEST_SIZE_MATCH(xXISetClientPointerReq);
+
     swaps(&stuff->length, n);
     swapl(&stuff->win, n);
     swaps(&stuff->deviceid, n);
-    REQUEST_SIZE_MATCH(xXISetClientPointerReq);
     return (ProcXISetClientPointer(client));
 }
 
--- a/Xi/xisetdevfocus.c
+++ b/Xi/xisetdevfocus.c
@@ -46,6 +46,8 @@ SProcXISetFocus(ClientPtr client)
     char n;
 
     REQUEST(xXISetFocusReq);
+    REQUEST_AT_LEAST_SIZE(xXISetFocusReq);
+
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
     swapl(&stuff->focus, n);
@@ -60,6 +62,8 @@ SProcXIGetFocus(ClientPtr client)
     char n;
 
     REQUEST(xXIGetFocusReq);
+    REQUEST_AT_LEAST_SIZE(xXIGetFocusReq);
+
     swaps(&stuff->length, n);
     swaps(&stuff->deviceid, n);
 
--- a/Xi/xiwarppointer.c
+++ b/Xi/xiwarppointer.c
@@ -59,6 +59,8 @@ SProcXIWarpPointer(ClientPtr client)
     char n;
 
     REQUEST(xXIWarpPointerReq);
+    REQUEST_SIZE_MATCH(xXIWarpPointerReq);
+
     swaps(&stuff->length, n);
     swapl(&stuff->src_win, n);
     swapl(&stuff->dst_win, n);
--- a/include/dix.h
+++ b/include/dix.h
@@ -73,6 +73,10 @@ SOFTWARE.
     if ((sizeof(req) >> 2) > client->req_len )\
          return(BadLength)
 
+#define REQUEST_AT_LEAST_EXTRA_SIZE(req, extra)  \
+    if (((sizeof(req) + ((uint64_t) extra)) >> 2) > client->req_len ) \
+         return(BadLength)
+
 #define REQUEST_FIXED_SIZE(req, n)\
     if (((sizeof(req) >> 2) > client->req_len) || \
         (((n) >> 2) >= client->req_len) || \
